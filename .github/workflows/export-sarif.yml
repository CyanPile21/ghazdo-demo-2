name: Export code-scanning SARIF to repo

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"  # Mondays 03:00 UTC

permissions:
  contents: write
  security-events: read

jobs:
  export:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Optional: append ?tool_name=CodeQL&ref=refs/heads/main
      - name: Get latest analysis id
        id: list
        run: |
          set -euo pipefail
          API="https://api.github.com/repos/${{ github.repository }}/code-scanning/analyses?per_page=1"
          ANALYSIS_ID=$(curl -sSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$API" | jq -r '.[0].id')
          if [ -z "${ANALYSIS_ID}" ] || [ "${ANALYSIS_ID}" = "null" ]; then
            echo "No code-scanning analyses found. Has a scan run yet?"
            exit 1
          fi
          echo "analysis_id=$ANALYSIS_ID" >> "$GITHUB_OUTPUT"

      - name: Download SARIF
        run: |
          set -euo pipefail
          mkdir -p security/reports
          curl -sSL \
            -H "Accept: application/sarif+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/analyses/${{ steps.list.outputs.analysis_id }}" \
            -o security/reports/code-scanning-${{ github.run_id }}.sarif.json

      - name: Normalize SARIF (strict viewers)
        run: |
          set -euo pipefail
          in=security/reports/code-scanning-${{ github.run_id }}.sarif.json
          out=security/reports/code-scanning-${{ github.run_id }}.sarif.cleaned.json

          jq '
            def walk(f):
              . as $in
              | if type == "object" then
                  reduce keys[] as $k ({}; . + { ($k): ($in[$k] | walk(f)) }) | f
                elif type == "array" then
                  map(walk(f)) | f
                else f end;

            def is_minimal_rule:
              (type=="object") and has("id") and ((keys|length)==1);

            .runs |= map(
              # Remove minimal artifacts
              del(.artifacts)

              # Strip artifactLocation.index pointers
              | walk(
                  if type=="object" and has("artifactLocation") and (.artifactLocation|type)=="object"
                  then .artifactLocation |= del(.index) else . end
                )

              # Drop empty messages
              | walk(
                  if type=="object" and has("message") and (.message|type)=="object"
                     and ((.message|keys|length)==0)
                  then del(.message) else . end
                )

              # SARIF1001: drop rule.name if equals id
              | (if (.tool.driver.rules? // null) != null then
                   .tool.driver.rules |= map( if (.name? and .id? and .name == .id) then del(.name) else . end )
                 else . end)
              | (if (.tool.extensions? // null) != null then
                   .tool.extensions |= map(
                     if (.rules? // null) != null
                     then .rules |= map( if (.name? and .id? and .name == .id) then del(.name) else . end )
                     else . end
                   )
                 else . end)

              # Drop rules arrays if every rule is id-only
              | (if (.tool.driver.rules? // null) != null and
                     ( .tool.driver.rules | length > 0 ) and
                     ( all(.tool.driver.rules[]; is_minimal_rule) )
                 then del(.tool.driver.rules) else . end)
              | (if (.tool.extensions? // null) != null then
                   .tool.extensions |= map(
                     if (.rules? // null) != null and
                        ( .rules | length > 0 ) and
                        ( all(.rules[]; is_minimal_rule) )
                     then del(.rules) else . end
                   )
                 else . end)

              # Results: prefer ruleId when rule is minimal; else keep rule and drop ruleId/ruleIndex
              | (if (.results? // null) != null then
                   .results |= map(
                     if (.rule? // null) != null and (.rule|type)=="object" then
                       ( if ((.rule|type)=="object" and (.rule|keys|length)==1 and (.rule|has("id"))) then
                           ( .ruleId = (.ruleId // .rule.id) ) | del(.rule)
                         else
                           del(.ruleId, .ruleIndex)
                         end )
                     else . end

                     # Ensure uriBaseId="SRCROOT" everywhere relevant
                     | ( if (.locations? // null) != null then
                           .locations |= map(
                             if (.physicalLocation?.artifactLocation? // null) != null and
                                ((.physicalLocation.artifactLocation.uriBaseId? // null) == null)
                             then .physicalLocation.artifactLocation.uriBaseId = "SRCROOT"
                             else . end
                           )
                         else . end )
                     | ( if (.relatedLocations? // null) != null then
                           .relatedLocations |= map(
                             if (.physicalLocation?.artifactLocation? // null) != null and
                                ((.physicalLocation.artifactLocation.uriBaseId? // null) == null)
                             then .physicalLocation.artifactLocation.uriBaseId = "SRCROOT"
                             else . end
                           )
                         else . end )
                     | ( if (.analysisTarget?.artifactLocation? // null) != null and
                              ((.analysisTarget.artifactLocation.uriBaseId? // null) == null)
                         then .analysisTarget.artifactLocation.uriBaseId = "SRCROOT"
                         else . end )
                   )
                 else . end)

              # SARIF2005: tool metadata
              | (.tool.driver |= (
                   .
                   | ( if (.name? and ((.name|tostring)|split(" ")|length) > 3)
                       then .fullName = (.fullName // .name)
                            | .name = ((.name|tostring)|split(" ")[0:3]|join(" "))
                       else . end )
                   | ( if (.informationUri? // null) == null
                       then .informationUri = "https://codeql.github.com/"
                       else . end )
                   | ( if ((.version? // null) == null and (.semanticVersion? // null) == null)
                       then .semanticVersion = "0.0.0"
                       else . end )
                 ))

              # SARIF2007: ensure versionControlProvenance[*].mappedTo.uriBaseId exists
              | ( if (.versionControlProvenance? // null) != null then
                    .versionControlProvenance |= map(
                      .mappedTo |= ( .mappedTo // {} )
                      | .mappedTo.uriBaseId = ( .mappedTo.uriBaseId // "SRCROOT" )
                    )
                  else . end)
            )
            # Top-level schema/version; coerce URIs to strings w/ forward slashes
            | ( .version = "2.1.0" )
            | ( .["$schema"] = "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json" )
            | walk(
                if (type=="object" and has("artifactLocation") and (.artifactLocation|type)=="object" and (.artifactLocation.uri? // null) != null)
                then .artifactLocation.uri = ((.artifactLocation.uri|tostring) | gsub("\\\\"; "/"))
                else .
                end
              )
          ' "$in" > "$out"
          mv "$out" "$in"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SARIF Multitool (local)
        run: dotnet tool install --tool-path . Sarif.Multitool

      - name: Pretty-print JSON (stable key order)
        run: |
          tmp=security/reports/code-scanning-${{ github.run_id }}.tmp.json
          jq -S . security/reports/code-scanning-${{ github.run_id }}.sarif.json > "$tmp"
          mv "$tmp" security/reports/code-scanning-${{ github.run_id }}.sarif.json

      - name: Duplicate as .sarif (VS Code friendly)
        run: |
          cp security/reports/code-scanning-${{ github.run_id }}.sarif.json security/reports/code-scanning-${{ github.run_id }}.sarif

      - name: Validate SARIF
        run: ./sarif validate security/reports/code-scanning-${{ github.run_id }}.sarif.json

      # --- NEW: split into smaller parts for the VS Code SARIF viewer ---
      - name: Split SARIF into parts (chunks of 2000 results per run)
        run: |
          set -euo pipefail
          in=security/reports/code-scanning-${{ github.run_id }}.sarif.json
          base=security/reports/code-scanning-${{ github.run_id }}

          # Count runs
          RUNS=$(jq '.runs | length' "$in")
          if [ "$RUNS" -eq 0 ]; then
            echo "No runs in SARIF; skipping split."
            exit 0
          fi

          CHUNK=2000
          for i in $(seq 0 $((RUNS-1))); do
            COUNT=$(jq ".runs[$i].results | length" "$in")
            if [ "$COUNT" -eq 0 ]; then
              # write a tiny file with no results (still useful for viewer)
              jq "{version, \$schema, runs:[ .runs[$i] | .results = [] ]}" "$in" > "${base}-run${i}-part1.sarif"
              continue
            fi
            START=0
            PART=1
            while [ "$START" -lt "$COUNT" ]; do
              jq --argjson i "$i" --argjson s "$START" --argjson n "$CHUNK" '
                { version, $schema } +
                { runs: [
                    ( .runs[$i]
                      | .results = ( .results | .[$s : ( ($s+$n) | if . > length then length else . end )] )
                    )
                  ] }
              ' "$in" > "${base}-run${i}-part${PART}.sarif"
              START=$((START + CHUNK))
              PART=$((PART + 1))
            done
          done

      - name: Commit SARIF files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: export SARIF (normalized, validated, split)"
          file_pattern: |
            security/reports/*.sarif.json
            security/reports/*.sarif
